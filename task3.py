# 1. Необходимо написать алгоритм поиска всех доступных комбинаций
# (посчитать количество) для количества кубиков K с количеством граней N.
# 2. У вас есть 2 варианта на выбор – количество кубиков может быть строго
# ограничено (4 кубика, например), либо их количество будет
# динамическим. Выбор за вами.
# 3. Если вы реализуете простой вариант, обращает внимание, что данное
# решение имеет сложность O(n4
# ), но если количество кубиков сделать
# переменной, то она трансформируется в O(nk
# ), что будет представлять
# собой экспоненциальную сложность. Для второго решения очевидно, что
# его сложность O(nk
# ) с самого начала.
# Необходимо сравнить скорость работы 2 алгоритмов вычисления чисел
# Фибоначчи и определить, какой из них работает быстрее. Так различия
# начнутся уже с 40 члена последовательности.

from random import randint
import time

def fibo_while(n):
    start = time.time()
    # 0;1; 0+1; 1+1; 1+2;
    f1=0
    f2=1
    i=0
    while i < n - 2:
        fib_sum=f1+f2
        f1=f2
        f2=fib_sum
        i+=1     
    print(f"Число Фибонначи {n} равно: {f2}")
    fin = time.time()
    print(f"Времени ушло {fin-start}")

def fibo_rec(n):
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibo_rec(n-1)+fibo_rec(n-2)

def fibo_rec_time(n):
    start = time.time()
    res = fibo_rec(n)
    print(f"Число Фибонначи {n} равно: {res}")
    fin = time.time()
    print(f"Времени ушло {fin-start}")

for n in range(10, 1000, 10):
    print(f"{n=}")   
    fibo_while(n)
    fibo_rec_time(1000)
   
